{"version":3,"sources":["control-panel.js","map-style.js","index.js"],"names":["ControlPanel","this","props","startTime","endTime","onChangeDay","allDay","onChangeAllDay","selectedTime","days","Math","round","className","type","name","checked","onChange","evt","target","time","date","Date","getMonth","getDate","getFullYear","formatTime","disabled","min","max","step","daysToAdd","value","PureComponent","heatmapLayer","maxzoom","paint","filterFeaturesByDay","featureCollection","year","month","day","features","filter","feature","featureDate","properties","App","_onViewportChange","viewport","setState","_handleChangeDay","state","earthquakes","data","_handleChangeAllDay","current","getTime","latitude","longitude","zoom","bearing","pitch","bind","requestJson","error","response","length","style","height","position","width","mapStyle","onViewportChange","mapboxApiAccessToken","containerComponent","Component","renderToDom","container","render"],"mappings":"2NAGqBA,E,iLACT,IAAD,EACyEC,KAAKC,MAA9EC,EADA,EACAA,UAAWC,EADX,EACWA,QAASC,EADpB,EACoBA,YAAaC,EADjC,EACiCA,OAAQC,EADzC,EACyCA,eAAgBC,EADzD,EACyDA,aAE1DC,EAAOC,KAAKC,OAAOP,EAAUD,GADvB,OAeZ,OACE,uBAAKS,UAAU,iBACb,qCACA,qDAEE,4BAEF,2BACA,uBAAKA,UAAU,SACb,yCACA,yBACEC,KAAK,WACLC,KAAK,SACLC,QAAST,EACTU,SAAU,SAAAC,GAAG,OAAIV,EAAeU,EAAIC,OAAOH,aAG/C,uBAAKH,UAAS,gBAAWN,EAAS,WAAa,KAC7C,0CAvBa,SAAAa,GACjB,IAAMC,EAAO,IAAIC,KAAKF,GACtB,MAAM,GAAN,OAAUC,EAAKE,WAAa,EAA5B,YAAiCF,EAAKG,UAAtC,YAAmDH,EAAKI,eAqBlCC,CAAWjB,IAC7B,yBACEK,KAAK,QACLa,SAAUpB,EACVqB,IAAK,EACLC,IAAKnB,EACLoB,KAAM,EACNb,SArCa,SAAAC,GACnB,IAAMa,EAAYb,EAAIC,OAAOa,MAG7B1B,EADgBF,EANN,MAMkB2B,OAqC1B,gC,GA9CkCE,iB,QCD7BC,EAAe,CAC1BC,QAHqB,EAIrBrB,KAAM,UACNsB,MAAO,CAEL,iBAAkB,CAAC,cAAe,CAAC,UAAW,CAAC,MAAO,OAAQ,EAAG,EAAG,EAAG,GAGvE,oBAAqB,CAAC,cAAe,CAAC,UAAW,CAAC,QAAS,EAAG,EAV3C,EAU8D,GAIjF,gBAAiB,CACf,cACA,CAAC,UACD,CAAC,mBACD,EACA,qBACA,GACA,mBACA,GACA,mBACA,GACA,mBACA,GACA,kBACA,GACA,oBAGF,iBAAkB,CAAC,cAAe,CAAC,UAAW,CAAC,QAAS,EAAG,EAhCxC,EAgC2D,IAE9E,kBAAmB,CAAC,cAAe,CAAC,UAAW,CAAC,QAAS,EAAG,EAAG,EAAG,K,oFCxBtE,SAASC,EAAoBC,EAAmBlB,GAC5C,IAAMC,EAAO,IAAIC,KAAKF,GAChBmB,EAAOlB,EAAKI,cACZe,EAAQnB,EAAKE,WACbkB,EAAMpB,EAAKG,UASjB,MAAO,CAACV,KAAM,oBAAqB4B,SARlBJ,EAAkBI,SAASC,QAAO,SAAAC,GAC/C,IAAMC,EAAc,IAAIvB,KAAKsB,EAAQE,WAAW1B,MAChD,OACIyB,EAAYpB,gBAAkBc,GAC9BM,EAAYtB,aAAeiB,GAC3BK,EAAYrB,YAAciB,M,IAMjBM,E,YACjB,WAAY5C,GAAQ,IAAD,uBACf,4CAAMA,KA6CV6C,kBAAoB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAACD,cA9C5B,EAgDnBE,iBAAmB,SAAA/B,GACf,EAAK8B,SAAS,CAACzC,aAAcW,IACzB,EAAKgC,MAAMC,aACX,EAAKH,SAAS,CAACI,KAAMjB,EAAoB,EAAKe,MAAMC,YAAajC,MAnDtD,EAuDnBmC,oBAAsB,SAAAhD,GAClB,EAAK2C,SAAS,CAAC3C,WACX,EAAK6C,MAAMC,aACX,EAAKH,SAAS,CACVI,KAAM/C,EACA,EAAK6C,MAAMC,YACXhB,EAAoB,EAAKe,MAAMC,YAAa,EAAKD,MAAM3C,iBA3DrE,IAAM+C,GAAU,IAAIlC,MAAOmC,UAFZ,OAIf,EAAKL,MAAQ,CACTH,SAAU,CACNS,SAAU,GACVC,WAAY,IACZC,KAAM,EACNC,QAAS,EACTC,MAAO,GAEXvD,QAAQ,EACRH,UAAWoD,EACXnD,QAASmD,EACT/C,aAAc+C,EACdH,YAAa,MAGjB,EAAKF,iBAAmB,EAAKA,iBAAiBY,KAAtB,gBACxB,EAAKR,oBAAsB,EAAKA,oBAAoBQ,KAAzB,gBApBZ,E,iFAuBE,IAAD,OAChBC,YACI,mEACA,SAACC,EAAOC,GACJ,IAAKD,EAAO,CAGR,IAAMvB,EAAWwB,EAASxB,SACpBrC,EAAUqC,EAAS,GAAGI,WAAW1B,KACjChB,EAAYsC,EAASA,EAASyB,OAAS,GAAGrB,WAAW1B,KAE3D,EAAK8B,SAAS,CACVI,KAAMY,EACNb,YAAaa,EACb7D,UACAD,YACAK,aAAcJ,U,+BA2BxB,IAAD,EAC8DH,KAAKkD,MAAjEH,EADF,EACEA,SAAUK,EADZ,EACYA,KAAM/C,EADlB,EACkBA,OAAQE,EAD1B,EAC0BA,aAAcL,EADxC,EACwCA,UAAWC,EADnD,EACmDA,QAExD,OACI,uBAAK+D,MAAO,CAACC,OAAQ,OAAQC,SAAU,aACnC,gBAAC,IAAD,iBACQrB,EADR,CAEIsB,MAAM,OACNF,OAAO,OACPG,SAAS,iCACTC,iBAAkBvE,KAAK8C,kBACvB0B,qBAhGC,6FAkGApB,GACG,gBAAC,IAAD,CAAQxC,KAAK,UAAUwC,KAAMA,GACzB,gBAAC,IAAUpB,KAIvB,gBAAC,EAAD,CACIyC,mBAAoBzE,KAAKC,MAAMwE,mBAC/BvE,UAAWA,EACXC,QAASA,EACTI,aAAcA,EACdF,OAAQA,EACRD,YAAaJ,KAAKiD,iBAClB3C,eAAgBN,KAAKqD,2B,GA7FRqB,aAoG1B,SAASC,EAAYC,GACxBC,iBAAO,gBAAC,EAAD,MAASD,M","file":"static/js/main.55acbee8.chunk.js","sourcesContent":["import * as React from 'react';\nimport {PureComponent} from 'react';\n\nexport default class ControlPanel extends PureComponent {\n  render() {\n    const {startTime, endTime, onChangeDay, allDay, onChangeAllDay, selectedTime} = this.props;\n    const day = 24 * 60 * 60 * 1000;\n    const days = Math.round((endTime - startTime) / day);\n\n    const _onChangeDay = evt => {\n      const daysToAdd = evt.target.value;\n      // add selected days to start time to calculate new time\n      const newTime = startTime + daysToAdd * day;\n      onChangeDay(newTime);\n    };\n\n    const formatTime = time => {\n      const date = new Date(time);\n      return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n    };\n\n    return (\n      <div className=\"control-panel\">\n        <h3>Heatmap</h3>\n        <p>\n          Mock data. Dont freak out\n          <br />\n        </p>\n        <hr />\n        <div className=\"input\">\n          <label>All Days</label>\n          <input\n            type=\"checkbox\"\n            name=\"allday\"\n            checked={allDay}\n            onChange={evt => onChangeAllDay(evt.target.checked)}\n          />\n        </div>\n        <div className={`input ${allDay ? 'disabled' : ''}`}>\n          <label>Each Day: {formatTime(selectedTime)}</label>\n          <input\n            type=\"range\"\n            disabled={allDay}\n            min={1}\n            max={days}\n            step={1}\n            onChange={_onChangeDay}\n          />\n        </div>\n        <hr />\n      </div>\n    );\n  }\n}\n","const MAX_ZOOM_LEVEL = 9;\n\nexport const heatmapLayer = {\n  maxzoom: MAX_ZOOM_LEVEL,\n  type: 'heatmap',\n  paint: {\n    // Increase the heatmap weight based on frequency and property magnitude\n    'heatmap-weight': ['interpolate', ['linear'], ['get', 'mag'], 0, 0, 6, 1],\n    // Increase the heatmap color weight weight by zoom level\n    // heatmap-intensity is a multiplier on top of heatmap-weight\n    'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, MAX_ZOOM_LEVEL, 3],\n    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n    // Begin color ramp at 0-stop with a 0-transparancy color\n    // to create a blur-like effect.\n    'heatmap-color': [\n      'interpolate',\n      ['linear'],\n      ['heatmap-density'],\n      0,\n      'rgba(33,102,172,0)',\n      0.2,\n      'rgb(103,169,207)',\n      0.4,\n      'rgb(209,229,240)',\n      0.6,\n      'rgb(253,219,199)',\n      0.8,\n      'rgb(239,138,98)',\n      0.9,\n      'rgb(255,201,101)'\n    ],\n    // Adjust the heatmap radius by zoom level\n    'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, MAX_ZOOM_LEVEL, 20],\n    // Transition from heatmap to circle layer by zoom level\n    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0]\n  }\n};\n","import * as React from 'react';\nimport {Component} from 'react';\nimport {render} from 'react-dom';\nimport MapGL, {Source, Layer} from 'react-map-gl';\nimport ControlPanel from './control-panel';\nimport {json as requestJson} from 'd3-request';\nimport {heatmapLayer} from './map-style';\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiY292aXZpIiwiYSI6ImNrN3ozbzkzNTAwcWozZWxsNmZ4Zm01b2sifQ.Q1j83pq8CZGqDr8jiXSPLw'; // Set your mapbox token here\n\nfunction filterFeaturesByDay(featureCollection, time) {\n    const date = new Date(time);\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const day = date.getDate();\n    const features = featureCollection.features.filter(feature => {\n        const featureDate = new Date(feature.properties.time);\n        return (\n            featureDate.getFullYear() === year &&\n            featureDate.getMonth() === month &&\n            featureDate.getDate() === day\n        );\n    });\n    return {type: 'FeatureCollection', features};\n}\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        const current = new Date().getTime();\n\n        this.state = {\n            viewport: {\n                latitude: 40,\n                longitude: -100,\n                zoom: 3,\n                bearing: 0,\n                pitch: 0\n            },\n            allDay: true,\n            startTime: current,\n            endTime: current,\n            selectedTime: current,\n            earthquakes: null\n        };\n\n        this._handleChangeDay = this._handleChangeDay.bind(this);\n        this._handleChangeAllDay = this._handleChangeAllDay.bind(this);\n    }\n\n    componentDidMount() {\n        requestJson(\n            'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\n            (error, response) => {\n                if (!error) {\n                    // Note: In a real application you would do a validation of JSON data before doing anything with it,\n                    // but for demonstration purposes we ingore this part here and just trying to select needed data...\n                    const features = response.features;\n                    const endTime = features[0].properties.time;\n                    const startTime = features[features.length - 1].properties.time;\n\n                    this.setState({\n                        data: response,\n                        earthquakes: response,\n                        endTime,\n                        startTime,\n                        selectedTime: endTime\n                    });\n                }\n            }\n        );\n    }\n\n    _onViewportChange = viewport => this.setState({viewport});\n\n    _handleChangeDay = time => {\n        this.setState({selectedTime: time});\n        if (this.state.earthquakes) {\n            this.setState({data: filterFeaturesByDay(this.state.earthquakes, time)});\n        }\n    };\n\n    _handleChangeAllDay = allDay => {\n        this.setState({allDay});\n        if (this.state.earthquakes) {\n            this.setState({\n                data: allDay\n                    ? this.state.earthquakes\n                    : filterFeaturesByDay(this.state.earthquakes, this.state.selectedTime)\n            });\n        }\n    };\n\n    render() {\n        const {viewport, data, allDay, selectedTime, startTime, endTime} = this.state;\n\n        return (\n            <div style={{height: '100%', position: 'relative'}}>\n                <MapGL\n                    {...viewport}\n                    width=\"100%\"\n                    height=\"100%\"\n                    mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n                    onViewportChange={this._onViewportChange}\n                    mapboxApiAccessToken={MAPBOX_TOKEN}\n                >\n                    {data && (\n                        <Source type=\"geojson\" data={data}>\n                            <Layer {...heatmapLayer} />\n                        </Source>\n                    )}\n                </MapGL>\n                <ControlPanel\n                    containerComponent={this.props.containerComponent}\n                    startTime={startTime}\n                    endTime={endTime}\n                    selectedTime={selectedTime}\n                    allDay={allDay}\n                    onChangeDay={this._handleChangeDay}\n                    onChangeAllDay={this._handleChangeAllDay}\n                />\n            </div>\n        );\n    }\n}\n\nexport function renderToDom(container) {\n    render(<App />, container);\n}\n"],"sourceRoot":""}